Name : Mitan Tank
Roll_No : IT25A64

'''
1. If we list all the natural numbers below 10 that are multiples of 3 or 5, we
get3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the
multiples of 3 or 5 below 1000.
'''
def sum_of_multiples(limit):
    total = 0
    for i in range(limit):
        if i % 3 == 0 or i % 5 == 0:
            total += i
    return total

n = int(input("Enter the limit: "))
result = sum_of_multiples(n)

print(f"Sum of multiples of 3 or 5 below {n} is {result}")


'''2. Accept two numbers from user and print all prime numbers between two
numbers.'''

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

def primes_between(start, end):
    for num in range(start, end + 1):
        if is_prime(num):
            print(num, end=' ')

start = int(input("Enter the start number: "))
end = int(input("Enter the end number: "))
primes_between(start, end)


# 3. The prime factors of 13195 are 5, 7, 13 and 29.

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

def is_factor(num, factor):
    return num % factor == 0

def prime_factors(n):
    for i in range(1,n+1):
        if is_factor(n, i) and is_prime(i):
            print(i, end=' ')

n = int(input("Enter a number to find its prime factors: "))
prime_factors(n)

# 3. The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 6000?

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

def is_factor(num, factor):
    return num % factor == 0

def prime_factors(n):
    for i in range(1,n+1):
        if is_factor(n, i) and is_prime(i):
            print(i, end=' ')

n = int(input("Enter a number to find its prime factors: "))
prime_factors(n)


'''4. Take two inputs from the user and display the multiplication tables for all
numbers in that range.
'''

def multiplication_table(num):
    for i in range(1, 11):
        print(f"{num} x {i} = {num * i}")
    print()

def multiplication_table_range(start, end):
    for number in range(start, end + 1):
        multiplication_table(number)


start = int(input("Enter the start number: "))
end = int(input("Enter the end number: "))

multiplication_table_range(start, end)


'''5. The sum of the squares of the first ten natural numbers is,
1 + 2 + ... + 10 = 385

The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10) = 55 = 3025

Hence the difference between the sum of the squares of the first ten
natural numbers and the square of the sum is 3025 - 385 = 2640.

Find the difference between the sum of the squares of the first one
hundred natural numbers and the square of the sum.'''


def first_n_squares(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i * i
    return sum

def square_of_sum(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i
    return sum * sum

def difference(n):
    diff = square_of_sum(n) - first_n_squares(n)
    return diff

n = int(input("Enter a number: "))
result = difference(n)
print(f"The difference is {result}")

'''6. 2520 is the smallest number that can be divided by each of the numbers
from 1 to 10 without any remainder. What is the smallest positive number
that is evenly divisible by all of the numbers from 1 to 20?'''







'''7. By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that
the 6th prime is 13.

What is the 101st prime number?'''


def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

def nth_position_prime(n):
    count = 0
    num = 1
    while count < n:
        num += 1
        if is_prime(num):
            count += 1
    return num

n = int(input("Enter which prime number you want to find: "))

result = nth_position_prime(n)
print(f"The {n}th prime number is {result}")


# 8. Take a number as input from the user and display the sum of its digits.

def sum_of_digits(num):
    total = 0
    while num > 0:
        digit = num % 10
        total += digit
        num //= 10
    return total


number = int(input("Enter a number: "))
result = sum_of_digits(number)
print(f"The sum of the digits is {result}")


# 9. Read a number from the user and output its reverse.

def reverse_number(num):
    sum = 0
    while num > 0:
        digit = num % 10
        sum = sum * 10 + digit
        num //= 10
    return sum


number = int(input("Enter a number: "))
result = reverse_number(number)
print(f"The reverse of the number is {result}")


'''10. Read two numbers from user and print all Armstrong numbers between two
numbers.'''

def is_armstrong(num):
    sum = 0
    while num > 0:
        digit = num % 10
        sum += digit ** 3
        num //= 10
    return sum


def armstrong_between(start, end):
    for num in range(start, end + 1):
        armstrong = is_armstrong(num) 
        if num == armstrong :
            print(num, end=' ')

start = int(input("Enter the start number: "))
end = int(input("Enter the end number: "))
armstrong_between(start, end)